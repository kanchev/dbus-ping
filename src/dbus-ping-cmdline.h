/** @file dbus-ping-cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef DBUS_PING_CMDLINE_H
#define DBUS_PING_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  const char *verbose_help; /**< @brief Inrease program output verbosity help description.  */
  const char *bash_help; /**< @brief Print result as bash variables help description.  */
  const char *session_help; /**< @brief send to the session message bus help description.  */
  const char *system_help; /**< @brief send to the system message bus help description.  */
  char * address_arg;	/**< @brief specify the address of the message bus.  */
  char * address_orig;	/**< @brief specify the address of the message bus original value given at command line.  */
  const char *address_help; /**< @brief specify the address of the message bus help description.  */
  char * type_arg;	/**< @brief message type (default='method_call').  */
  char * type_orig;	/**< @brief message type original value given at command line.  */
  const char *type_help; /**< @brief message type help description.  */
  char * destination_arg;	/**< @brief bus name of the destination.  */
  char * destination_orig;	/**< @brief bus name of the destination original value given at command line.  */
  const char *destination_help; /**< @brief bus name of the destination help description.  */
  char * path_arg;	/**< @brief target object's path.  */
  char * path_orig;	/**< @brief target object's path original value given at command line.  */
  const char *path_help; /**< @brief target object's path help description.  */
  char * interface_arg;	/**< @brief interface of the target object.  */
  char * interface_orig;	/**< @brief interface of the target object original value given at command line.  */
  const char *interface_help; /**< @brief interface of the target object help description.  */
  char * member_arg;	/**< @brief member of the target object.  */
  char * member_orig;	/**< @brief member of the target object original value given at command line.  */
  const char *member_help; /**< @brief member of the target object help description.  */
  int contents_multiply_arg;	/**< @brief append message contents clone (default='0').  */
  char * contents_multiply_orig;	/**< @brief append message contents clone original value given at command line.  */
  const char *contents_multiply_help; /**< @brief append message contents clone help description.  */
  #ifdef HAVE_LONG_LONG
  long long int count_arg;	/**< @brief number of times the message will be sent (default=1).  */
  #else
  long count_arg;	/**< @brief number of times the message will be sent (default=1).  */
  #endif
  char * count_orig;	/**< @brief number of times the message will be sent original value given at command line.  */
  const char *count_help; /**< @brief number of times the message will be sent help description.  */
  const char *clone_help; /**< @brief intensively rebuild the message before sending (default is copy) help description.  */
  int reply_timeout_arg;	/**< @brief reply message timeout (default='-1').  */
  char * reply_timeout_orig;	/**< @brief reply message timeout original value given at command line.  */
  const char *reply_timeout_help; /**< @brief reply message timeout help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int bash_given ;	/**< @brief Whether bash was given.  */
  unsigned int session_given ;	/**< @brief Whether session was given.  */
  unsigned int system_given ;	/**< @brief Whether system was given.  */
  unsigned int address_given ;	/**< @brief Whether address was given.  */
  unsigned int type_given ;	/**< @brief Whether type was given.  */
  unsigned int destination_given ;	/**< @brief Whether destination was given.  */
  unsigned int path_given ;	/**< @brief Whether path was given.  */
  unsigned int interface_given ;	/**< @brief Whether interface was given.  */
  unsigned int member_given ;	/**< @brief Whether member was given.  */
  unsigned int contents_multiply_given ;	/**< @brief Whether contents-multiply was given.  */
  unsigned int count_given ;	/**< @brief Whether count was given.  */
  unsigned int clone_given ;	/**< @brief Whether clone was given.  */
  unsigned int reply_timeout_given ;	/**< @brief Whether reply-timeout was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
  int Connection_group_counter; /**< @brief Counter for group Connection */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_type_values[];  /**< @brief Possible values for type. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* DBUS_PING_CMDLINE_H */
